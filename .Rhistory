dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
list.files("diet_data")
files_list <- list.files(directory, full.names=TRUE)   #creates a list of files
directory <- c("diet_data\")
files_list <- list.files(directory, full.names=TRUE)   #creates a list of files
dat <- data.frame()                             #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat
}
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
files_list <- list.files("diet_data\", full.names = TRUE)
files_list
>
|
~/
pollutantmean <- function(directory, pollutant, id=1:332){
files_full <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for (i in 1:332) {
dat <- rbind(dat, read.csv(files_full[i]))
}
}
pollutantmean("specdata", "sulfur)
source('~/.active-rstudio-document')
swirl()
library(swirl)
swirl()
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, package == r_version == "3.1.1", country == "US")
filter(cran,  r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "IN" | country =="US")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na( c(3, 5, NA, 10))
!is.na( c(3, 5, NA, 10))
filter (cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange (cran2, ip_id)
arrange (cran2, desc(ip_id))
arrange (cran2, package, ip_id)
arrange (cran2, country, desc(country), ip_id)
arrange (cran2, country, desc(r_version), ip_id)
select( cran, c(ip_id, package, size))
cran3 <- select( cran, c(ip_id, package, size))
cran3 <- select( cran, ip_id, package, size)
cran3
mutate( cran3, size_mb = size / 2^20)
mutate( cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate( cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
View(mydf)
cran <- tbl_df(mydf)
play()
class(my_df)
class(mydf)
class(cran)
nxt()
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize (by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter( pack_sum, count >679)
top_counts
View()
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter( pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange ( top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library (tidyr)
students
?gather
gather( students, sex, count, -grade)
students2
gather ( students2, sex_class, count, -grade)
res <- gather ( students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
students4
?select
submit()
?unique
submit()
submit()
passed
failed
?mutate
passed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
packageVersion('dplyr')
bind_rows(passed, failed)
sat
?select
?gather
?separate
submit()
submit()
?group_by
submit()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
?read.csv
mydf <= read.table(path2csv, stringAsFactors=FALSE)
mydf <- read.table(path2csv, stringAsFactors=FALSE)
mydf <- read.csv(path2csv)
mydf <- read.csv(path2csv, stringAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(df)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select (cran, -time)
-5:20
-(5:20)
select (cran, -(X:size))
filter(cran, package =="swirl")
play()
filter(cran, package =="swir")
filter(cran, package =="swirl")
filter(cran, package =="swir*")
grep (cran, cran$package =="swirl")
quit()
y <- pexp( 6, 1/5, lower.tail=FALSE)
y
y <- pexp( 11, 1/10, lower.tail=FALSE)
y
?qexp
gexp(0.5, 1/2, lower.tail=FALSE)
qexp(0.5, 1/2, lower.tail=FALSE)
pexp(1.38, 1/2, lower.tail=FALSE)
qexp(0.5, 2, lower.tail=FALSE)
swirl()
library(swirl)
swirl()
?sample
sample(1:2, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=1--, prob=0.7)
rbinom(1, size=100, prob=0.7)
flips <- rbinom(100, size=1, prob=0.7)
flips <- rbinom(n = 100, size=1, prob=0.7)
flips2 <- rbinom(n = 100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
rbinom(1, 100)
rbinom(1, 100, prob=0.5)
flips <- rbinom(1, 100, prob=0.5)
flips
flips2 <- rbinom(100, 1, prob=0.5)
flips2
mean(flips2)
var(flips2)
flips2 <- rbinom(10, 1, prob=0.5)
flips2
flips2 <- rbinom(100, 10, prob=0.5)
flips2
flips2 <- rbinom(100, 1, prob=0.5)
flips2
sum(flips2)
flips2 <- rbinom(100, 1, prob=0.5)
sum(flips2)
mean(flips2)
flips2 <- rbinom(1000, 1, prob=0.5)
mean(flips2)
var(flips2)
?rbinom
rbinom
?rbinom
?pareto
??pareto
?random
??norm
<norm
?norm
?rnorm
stuff <- rnorm(1000, mean=0, sd=0.5)
stuff
hist(stuff)
mean(stuff)
stuff <- rnorm(10000, mean=0, sd=1.o)
stuff <- rnorm(10000, mean=0, sd=1.0
)
stuff <- rnorm(10000, mean=0, sd=1.0)
hist(stuff)
?rnorm
stuff <- rnorm(100000, mean=0, sd=1.0)
hist(stuff)
mean(stuff)
var(stuff)
library(swirl)
swirl()
quit()
swirl
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
submit()
students4
submit()
?unique
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
?mutate
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
submit()
R.version
packageVersion(swirl)
packageVersion("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
library(ggplot2)
install.packages("ggplot2")
library swirl()
library(swirl)
swirl()
library(ggplot2)
head(pollution)
dim(pollution)
summary(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta, lwd=4"
)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg <- table(pollution$reg)
reg <- table(pollution$region)
reg
barplot (reg, col="wheat", main = "Number of counties in Each Region")
barplot (reg, col="wheat", main = "Number of Counties in Each Region")
boxpot(pm25~region, data = pollution, col = "red")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2, 1))
par( mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset( pollution, region == "east")
head(east)
hist(pm25, col=green)
hist(pollution$pm25, col=green)
hist(east$pm25, col=green)
hist(pm25, col="green")
hist(east$pm25, col="green")
hist(subset(pollution$pm25, region == "west"), col="green")
hist(subset(pollution$pm25, pollution$region == "west"), col="green")
hist(subset(pollution, region == "west")$pm25, col="green")
with (pollution, plot(latitude, pm25))
abline (h=12)
abline (h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=(polltuon$region)
)
plot(pollution$latitude, ppm, col=(pollution$region))
plot(pollution$latitude, ppm, col=(pollution$region))
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$lattitude, west$pm25, main="West")
plot(west$lattitude~west$pm25, main="West")
plot(west$lattitude, west$pm25, main="West")
plot(west$latitude~west$pm25, main="West")
plot (west$latitude, west$pm25, main="West")
plot (west$latitude, west$pm25, main="")
plot (east$latitude, east$pm25, main="East")
library(swirl)
swirl()
?Devices
salkj
plot(eruptions, waiting)
plote(east)
plot(east)
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser Data")
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
title(main="Old Faithful Geyser data")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
play()
hist(airquality$Ozone)
dev.off()
library(plot)
hist(airquality$Ozone)
?
)
nxt()
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main="Ozone and Wind in New York City")
with (airquality, plot(Wind~Ozone))
with (airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
par()
length(par())
names(par())
par($pin)
par(
)$pin
par('fg')
par('pch')
par('lty')
plot(airquality$Wind, airquality$Ozone, typeset='n')
plot(airquality$Wind, airquality$Ozone, set='n')
plot(airquality$Wind, type='n', airquality$Ozone, set='n')
plot(airquality$Wind, type='n', airquality$Ozone)
title(main='Wind and Ozone in NYC')
may <- 5
may <- subset(airquality, Month == 5)
?[ch]
?pch
with (may, points(Wind, Ozone, pch=2, col=2))
?col
?points
with (may, points(Wind, Ozone, pch=2, col='blue'))
with (may, points(Wind, Ozone, pch=17, col='blue'))
points(may$Wind, may$Ozone, col='blue', pch=17)
notmay <- subset(airquality, Month != 5)
?pch
points(notmay$Wind, notmay$Ozone, col='red', pch=8)
legend('topright', pch=c(17,8), col=c('blue', 'red'), legend=c('May', 'Other Months') )
anline(v=median(airquality$Wind)m lty=2, lwd=2)
abline(v=median(airquality$Wind)m lty=2, lwd=2)
abline(v=median(airquality$Wind) lty=2, lwd=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
mfrow(c(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main='Ozone and Wind')
plot(airquality$Ozone, airquality$Solar.R, main='Ozone and Solar Radiation')
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main='Ozone and Wind')
plot(airquality$Solar.R, airquality$Ozone, main='Ozone and Solar Radiation')
plot(airquality$Temp, airquality$Ozone, main='Ozone and Temperature')
mtext('Ozone and Weather in New York City', outer=TRUE)
#Set the working directory correctly
setwd("~/Desktop/RProjects/Coursera/ExploratoryDataAnalysis/Week1/ExData_Plotting1")
list.files()
# first load in the data from p2.rda
p2 <- load('p2.rda')
ls
ls
p2
p2 <- load("p2.rda")
?read.csv
p2 <- read.csv(file='p2.csv')
View(`p2`)
View(`p2`)
